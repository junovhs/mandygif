export component RegionSelector inherits Window {
    width: 1920px;
    height: 1080px;
    always-on-top: true;
    no-frame: true;
    
    in-out property <length> sel-x: 460px;
    in-out property <length> sel-y: 240px;
    in-out property <length> sel-width: 1000px;
    in-out property <length> sel-height: 600px;
    
    property <bool> dragging-move: false;
    property <bool> dragging-resize: false;
    property <length> drag-offset-x;
    property <length> drag-offset-y;
    
    callback confirm();
    callback cancel();
    
    background: #00000060;
    
    // Dark overlay - click to cancel
    Rectangle {
        TouchArea {
            clicked => { root.cancel(); }
        }
    }
    
    // Selection box
    Rectangle {
        x: sel-x;
        y: sel-y;
        width: sel-width;
        height: sel-height;
        
        // Cutout effect - transparent center
        Rectangle {
            width: parent.width;
            height: parent.height;
            background: transparent;
            border-width: 2px;
            border-color: #00ffff;
        }
        
        // Top bar
        Rectangle {
            y: -40px;
            width: parent.width;
            height: 40px;
            background: #1a1a1a;
            
            HorizontalLayout {
                padding: 8px;
                spacing: 8px;
                
                Text {
                    text: round(sel-width / 1px) + " × " + round(sel-height / 1px);
                    color: white;
                    font-size: 14px;
                    vertical-alignment: center;
                    horizontal-stretch: 1;
                }
                
                Rectangle {
                    width: 24px;
                    height: 24px;
                    background: #cc0000;
                    border-radius: 4px;
                    Text {
                        text: "✕";
                        color: white;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                    TouchArea { clicked => { root.cancel(); } }
                }
            }
            
            // Drag to move
            TouchArea {
                width: parent.width - 40px;
                height: parent.height;
                
                pointer-event(event) => {
                    if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                        root.drag-offset-x = self.mouse-x;
                        root.drag-offset-y = self.mouse-y;
                        root.dragging-move = true;
                    } else if (event.kind == PointerEventKind.up) {
                        root.dragging-move = false;
                    }
                }
                
                moved => {
                    if (self.pressed && root.dragging-move) {
                        sel-x = sel-x + self.mouse-x - root.drag-offset-x;
                        sel-y = sel-y + self.mouse-y - root.drag-offset-y;
                    }
                }
            }
        }
        
        // Bottom bar
        Rectangle {
            y: parent.height;
            width: parent.width;
            height: 50px;
            background: #1a1a1a;
            
            HorizontalLayout {
                padding: 10px;
                spacing: 10px;
                alignment: center;
                
                // Record button
                Rectangle {
                    width: 60px;
                    height: 30px;
                    background: #ff0000;
                    border-radius: 15px;
                    
                    Text {
                        text: "REC";
                        color: white;
                        font-weight: 700;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                    
                    TouchArea {
                        clicked => { root.confirm(); }
                    }
                }
            }
        }
        
        // Corner handles (simple circles, always visible)
        Rectangle {
            x: -10px;
            y: -10px;
            width: 20px;
            height: 20px;
            background: #00ffff;
            border-radius: 10px;
            
            TouchArea {
                property <length> start-x;
                property <length> start-y;
                property <length> start-w;
                property <length> start-h;
                
                pointer-event(event) => {
                    if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                        self.start-x = sel-x;
                        self.start-y = sel-y;
                        self.start-w = sel-width;
                        self.start-h = sel-height;
                    }
                }
                
                moved => {
                    if (self.pressed) {
                        sel-x = self.start-x + self.mouse-x;
                        sel-y = self.start-y + self.mouse-y;
                        sel-width = max(200px, self.start-w - self.mouse-x);
                        sel-height = max(100px, self.start-h - self.mouse-y);
                    }
                }
            }
        }
        
        Rectangle {
            x: parent.width - 10px;
            y: -10px;
            width: 20px;
            height: 20px;
            background: #00ffff;
            border-radius: 10px;
            
            TouchArea {
                property <length> start-y;
                property <length> start-w;
                property <length> start-h;
                
                pointer-event(event) => {
                    if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                        self.start-y = sel-y;
                        self.start-w = sel-width;
                        self.start-h = sel-height;
                    }
                }
                
                moved => {
                    if (self.pressed) {
                        sel-y = self.start-y + self.mouse-y;
                        sel-width = max(200px, self.start-w + self.mouse-x);
                        sel-height = max(100px, self.start-h - self.mouse-y);
                    }
                }
            }
        }
        
        Rectangle {
            x: -10px;
            y: parent.height - 10px;
            width: 20px;
            height: 20px;
            background: #00ffff;
            border-radius: 10px;
            
            TouchArea {
                property <length> start-x;
                property <length> start-w;
                property <length> start-h;
                
                pointer-event(event) => {
                    if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                        self.start-x = sel-x;
                        self.start-w = sel-width;
                        self.start-h = sel-height;
                    }
                }
                
                moved => {
                    if (self.pressed) {
                        sel-x = self.start-x + self.mouse-x;
                        sel-width = max(200px, self.start-w - self.mouse-x);
                        sel-height = max(100px, self.start-h + self.mouse-y);
                    }
                }
            }
        }
        
        Rectangle {
            x: parent.width - 10px;
            y: parent.height - 10px;
            width: 20px;
            height: 20px;
            background: #00ffff;
            border-radius: 10px;
            
            TouchArea {
                property <length> start-w;
                property <length> start-h;
                
                pointer-event(event) => {
                    if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                        self.start-w = sel-width;
                        self.start-h = sel-height;
                    }
                }
                
                moved => {
                    if (self.pressed) {
                        sel-width = max(200px, self.start-w + self.mouse-x);
                        sel-height = max(100px, self.start-h + self.mouse-y);
                    }
                }
            }
        }
    }
}