import { Button, HorizontalBox, VerticalBox, ComboBox, Slider, LineEdit } from "std-widgets.slint";

export struct Region {
    x: int,
    y: int,
    width: int,
    height: int,
}

export enum AppState {
    idle,
    recording,
    editing,
    exporting,
}

export component AppWindow inherits Window {
    // Window config
    title: "MandyGIF";
    width: 400px;
    height: 600px;
    
    // State
    in-out property <AppState> state: AppState.idle;
    in-out property <Region> capture-region: { x: 100, y: 100, width: 800, height: 600 };
    in-out property <int> recording-duration-ms: 0;
    in-out property <string> status-text: "Ready to record";
    
    // Export settings
    in-out property <string> export-format: "gif";
    in-out property <int> export-fps: 15;
    in-out property <int> trim-start-ms: 0;
    in-out property <int> trim-end-ms: 3000;
    in-out property <int> scale-width: 480;
    
    // Callbacks
    callback start-recording();
    callback stop-recording();
    callback start-export();
    callback show-region-selector();
    
    VerticalBox {
        padding: 20px;
        spacing: 15px;
        
        // Status section
        Rectangle {
            height: 80px;
            background: #1a1a1a;
            border-radius: 8px;
            
            VerticalBox {
                alignment: center;
                
                Text {
                    text: status-text;
                    font-size: 16px;
                    horizontal-alignment: center;
                }
                
                if state == AppState.recording: HorizontalBox {
                    alignment: center;
                    spacing: 8px;
                    
                    Rectangle {
                        width: 12px;
                        height: 12px;
                        background: #ef4444;
                        border-radius: 6px;
                    }
                    
                    Text {
                        text: (recording-duration-ms / 1000) + "s";
                        font-size: 20px;
                        color: #ef4444;
                    }
                }
            }
        }
        
        // Capture region controls (idle state)
        if state == AppState.idle: VerticalBox {
            spacing: 10px;
            
            Text {
                text: "Capture Region";
                font-size: 14px;
                font-weight: 600;
            }
            
            HorizontalBox {
                spacing: 10px;
                
                Text { text: "Position:"; }
                Text { text: capture-region.x + "," + capture-region.y; color: #888; }
            }
            
            HorizontalBox {
                spacing: 10px;
                
                Text { text: "Size:"; }
                Text { text: capture-region.width + "Ã—" + capture-region.height; color: #888; }
            }
            
            Button {
                text: "Select Region";
                clicked => { show-region-selector() }
            }
            
            Button {
                text: "Start Recording";
                primary: true;
                clicked => { start-recording() }
            }
        }
        
        // Recording controls
        if state == AppState.recording: VerticalBox {
            spacing: 10px;
            
            Button {
                text: "Stop Recording";
                clicked => { stop-recording() }
            }
        }
        
        // Editor controls
        if state == AppState.editing: VerticalBox {
            spacing: 10px;
            
            Text {
                text: "Edit Recording";
                font-size: 14px;
                font-weight: 600;
            }
            
            HorizontalBox {
                spacing: 10px;
                
                Text { text: "Trim:"; }
                Text { text: (trim-start-ms / 1000) + "s - " + (trim-end-ms / 1000) + "s"; color: #888; }
            }
            
            Text { text: "Start (s)"; font-size: 12px; }
            Slider {
                minimum: 0;
                maximum: recording-duration-ms;
                value: trim-start-ms;
                changed(v) => { trim-start-ms = Math.round(v); }
            }
            
            Text { text: "End (s)"; font-size: 12px; }
            Slider {
                minimum: 0;
                maximum: recording-duration-ms;
                value: trim-end-ms;
                changed(v) => { trim-end-ms = Math.round(v); }
            }
            
            HorizontalBox {
                spacing: 10px;
                
                VerticalBox {
                    Text { text: "Format"; font-size: 12px; }
                    ComboBox {
                        model: ["GIF", "WebP", "MP4"];
                        current-value: export-format;
                        selected(v) => {
                            export-format = v == "GIF" ? "gif" : (v == "WebP" ? "webp" : "mp4");
                        }
                    }
                }
                
                VerticalBox {
                    Text { text: "FPS"; font-size: 12px; }
                    ComboBox {
                        model: ["10", "15", "24", "30"];
                        current-value: export-fps + "";
                        selected(v) => {
                            export-fps = v == "10" ? 10 : (v == "15" ? 15 : (v == "24" ? 24 : 30));
                        }
                    }
                }
                
                VerticalBox {
                    Text { text: "Width"; font-size: 12px; }
                    ComboBox {
                        model: ["360", "480", "720", "1080"];
                        current-value: scale-width + "";
                        selected(v) => {
                            scale-width = v == "360" ? 360 : (v == "480" ? 480 : (v == "720" ? 720 : 1080));
                        }
                    }
                }
            }
            
            Button {
                text: "Export";
                primary: true;
                clicked => { start-export() }
            }
        }
        
        // Exporting state
        if state == AppState.exporting: VerticalBox {
            alignment: center;
            
            Text {
                text: "Exporting...";
                font-size: 16px;
            }
        }
    }
}